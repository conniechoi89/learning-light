Instructor.create!([
  {name: "Maggie Moss", position: "Web Developer", description: "The curriculum for this course was created by Maggie Moss. Maggie was part of our rockstar January cohort in Vancouver, and now she's passing on that knowledge to our students in as the instructor for our Intro to Web Development course in Toronto. She currently works as a Rails developer @ShopStorm."},
  {name: "David VanDusen", position: "Web Developer & Instructor", description: "David is a sort of web dev Don Quixote, helping out wherever he is needed. He has grappled with his share of technological windmills yet continues his chivalrous fight for clean, beautiful code. That said, David is a renaissance man and pursues fine arts and music in his leisure."},
  {name: "Juan Gonzalez", position: "Web Developer & Instructor", description: "Juan is a Software Engineer who allegedly sold his first project in 1988. Whatever language was used to develop it has been forgotten. More recently he has been an entrepreneur with a passion for all things video."},
  {name: "David Mills", position: "iOS Developer", description: "David Mills has been working as a Web and Mobile developer for the last 7 years. In that time he's worked for a Digital Agency, where he helped build, test and launch websites for brands such as Adidas, Sleeman and McCain. While at the agency he taught himself iOS development, and moved into the startup space, looking for a new challenge, working for a variety of startups building iOS and Web applications. Looking for his next challenge, he currently teaches with Lighthouse Labs, leading lectures and mentoring both the Web and iOS bootcamps in Toronto."}
])
Course.create!([
  {name: "HTML & CSS Essentials", coursename: "html-css-essentials", blurb: "Learn to build basic web pages using HTML & CSS.", description: "This course was created by Lighthouse Labs to introduce you to the basics of coding. This is just the beginning - there is a world of resources and avenues available for you to grow your digital literacy. Learning to code is more accessible than ever, whether it's learning in person, online or a little bit of both, there are endless ways you can expand your knowledge.", instructor_id: 1},
  {name: "JavaScript Essentials", coursename: "js-essentials", blurb: "Learn to build and style your own web-based chat app using JavaScript.", description: "In this free course, you'll be learning how to build your own web-based chat app similar to Twitch or Slack using JavaScript and other modern tools like Node.js and Web Sockets. The goal of this course is to introduce you to the fundamentals of building web-based applications using some of the most prominent and widely used programming technologies!\n\nIf you're new to programming, we recommend you start with our HTML & CSS Essentials course.", instructor_id: 2},
  {name: "JavaScript Essentials Part II", coursename: "js-essentials-2", blurb: "Upgrade your chat app by building your own Bot with JavaScript.", description: "This course will be building on our JavaScript Essentials Part I course, where we created a web-based chat app. Our focus today will be to make this chat app much smarter by adding some super powers, very much the way that Messenger or Slack or many other conversational interfaces are becoming smarter: with a BOT.", instructor_id: 3},
  {name: "iOS Essentials", coursename: "ios-essentials", blurb: "Learn the basics of iOS development using Swift by building a mobile music player.", description: "In this free course, you'll be learning how to build your own music player similar to your iTunes or Spotify app using Apple's popular programming language Swift. The goal of this course is to introduce you to the fundamentals of building mobile applications using some of the most prominent and widely used programming technologies!\n\nIf you're new to programming, we recommend you start with our HTML & CSS Essentials course.", instructor_id: 4}
])
Chapter.create!([
  {name: "Welcome!", chapter_number: 1, course_id: 3},
  {name: "Building A Bot", chapter_number: 2, course_id: 3},
  {name: "Fetching Data From APIs", chapter_number: 3, course_id: 3},
  {name: "Continue Your Learning", chapter_number: 4, course_id: 3},
  {name: "Welcome!", chapter_number: 1, course_id: 1},
  {name: "Intro to HTML", chapter_number: 2, course_id: 1},
  {name: "Intro to CSS", chapter_number: 3, course_id: 1},
  {name: "Practice Your Skills", chapter_number: 4, course_id: 1},
  {name: "Keep Learning!", chapter_number: 5, course_id: 1},
  {name: "Welcome!", chapter_number: 1, course_id: 2},
  {name: "Styling With HTML & CSS", chapter_number: 2, course_id: 2},
  {name: "Functionality With JavaScript", chapter_number: 3, course_id: 2},
  {name: "Continue Your Learning", chapter_number: 4, course_id: 2},
  {name: "Welcome", chapter_number: 1, course_id: 4}
])
Section.create!([
  {name: "Introduction", sectionname: "intro", section_number: 1, content: "### Welcome to Part II of our JavaScript Essentials course!\n\nThis curriculum was created by the Lighthouse Labs education team for our free JavaScript Essentials Workshops. Our goal is to show you how modern web applications are built by bringing together software components that may be located elsewhere but that can be combined to create more complex behaviour. To do so, we'll learn how Javascript provides all the essential tools to GET data from other sources and manipulate that data to fit our needs.\n\n### You will have needed to completed JavaScript Essentials Part I in order to continue with this course.\n\n### Who are we?\n\nWe're Lighthouse Labs (👋 ), a Canadian software development school aiming to change the way tech education is being delivered. Our goal is to find the best ways to train the next generation of developers and to empower everyone to take ownership over their digital literacy.\n\n### How do we do that?\n\nWe offer in-person courses in web or iOS development in seven Canadian cities, with a ton of hands-on experience and access to mentorship from seasoned Developers in your community. Our courses provide people with data-driven curriculum covering modern languages and frameworks that are essential for those working in the technology industry.\n\n### Web or iOS Development Bootcamp - 8 weeks, full-time immersive (500+ hours)\n\nThe goal of our Bootcamps is to transform you into a professional Developer. You’ll come to understand coding logic using popular languages and frameworks, while learning how to think like a programmer by building software from the ground up. Bootcamp will provide you with mentorship, data-driven curriculum, and a top notch learning environment that will launch you into your first Junior Developer role with an over 96% employment rate for job seeking graduates.\n\n### Intro to Web or iOS Development - 6 weeks, part-time twice a week (36+ hours)\n\nThis course is focused on equipping you with tools that apply directly to professional web or iOS development. You'll learn what goes in to creating and deploying apps and will gain a solid understanding of the fundamentals of programming. This course is an excellent option for anyone looking to discover if they want to become a Developer, to learn to communicate with a dev team or to gain valuable coding experience for a hybrid technical role.\n\n🚀 In addition to our courses, we often host free workshops and events geared towards new coders. Click here to find the next event near you! You can also get in touch to book a tour of our campus or take a virtual tour below.\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jpV63pXI5d0\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n", chapter_id: 1},
  {name: "Building A Chat Bot", sectionname: "building-a-chat-bot", section_number: 2, content: "### PRE-REQ\n\nIf you are thinking about taking this course, you've probably attended Part I where we built a simple chat application using modern web tools such as Node.js, Websockets and JQuery.  If you didn't, please note that we'll start exactly where we left off. It would be wise to at the very least go through the Part I notes (insert link) to warm up.\n\n### GOAL\n\nToday' session goal is to show you how modern web application are built by bringing together software components that may be located elsewhere but that can be combined to create more complex behaviour.  To do so, we'll learn how Javascript provides all the essential tools to GET data from other sources and manipulate that data to fit our needs.\n\n### PRODUCT\n\nIf you recall, by the end of the previous session we had managed to create a Chat Application, (show running version).  Our focus today will be to make this Chat Application much smarter by adding some super powers, very much the way that Messenger or Slack or many other conversational interfaces are becoming smarter:  with a BOT.\n\n### APPROACH\n\nNot an easy goal, particularly for a single session like the one we have planned today.  To make it possible we'll follow the Lighthouse Labs approach:\n\n- Lots of coding!  I'll be coding things on screen.  Try to make sense of things I'm doing.  \n\n- When you are ready to code, follow the very same code snippets found in these notes. Don't worry if you fall behind, the notes are very thorough.  I rather you understand now and code at your own pace later on.\n\n- Ask questions! we have a number of mentors helping out.  If you have any question or something is not working as planned, don't be afraid to raise your hand.\n\nLet's start by reviewing the very final version of the product we built during our last session.", chapter_id: 1},
  {name: "Getting Started", sectionname: "getting-started", section_number: 3, content: "### CLONE \n\nI'll share a lot of code, just in case you don't have it.  As many professional software developers do these days, I'll share it by simply giving you access to the Github project (link to github).  You can either download the project and `clone` it.\n\nThe following sequence of commands will download the code into a new folder and prepare your computer to run the software.  This is necessary because you may not have all the tools and libraries that the software needs to run.\n```\ngit clone https://github.com/lighthouse-labs/js-essentials-2\ncd js-essentials-2\nnpm install\nnpm start\n```\n\nIf everything worked out well, you should see the message\n```\nChat Application running...\n```\n\nAnd if you use your browser to open the URL:  http://localhost:8080 you should see the chat application.  Go ahead, give it a try.\n\n![Screenshot](https://github.com/jugonzal/gitbook-node-chat-tutorial/blob/master/assets/example-cropped.png)", chapter_id: 1},
  {name: "Code Review", sectionname: "code-review", section_number: 1, content: "### CODE REVIEW\n\nThere is much code to get acquainted with as we will be upgrading it with super powers.  How about we try to follow the fundamental sequence of events that makes our chat room possible:\n\n1. The index.html page contains a form:\n```\n<form>\n  <input id=\"initials\">\n  <input id=\"message\">\n  <button>Send!</button>\n</form>\n```\n\n2. The app.js creates an event handler that \"listens\" to clicks on the `<button>Send!</button>` and uses websockets to emit (send) a message using websockets:\n```\n$(\"button\").on('click', function() {\n  var text = $(\"#message\").val();\n  var who = $(\"#initials\").val();\n  \n  socket.emit('message', who + \": \" + text);\n  $('#message').val('');\n  \n  return false;\n});\n```\n\n3. The server.js is listening for messages coming from any client connected and will simply \"echo\" the same message back to ALL clients:\n```\nsocket.on('message', function (msg) {\n  console.log('Received Message: ', msg);\n  io.emit('message', msg);\n});\n```\n\n4. The app.js is listening for messages from the server and upon receiving one, it will simply use JQuery to add a new entry to the HTML.\n```\nsocket.on('message', function (msg) {\n  $('<li>').text(msg).appendTo('#history');\n});\n```\n\nA good way to confirm that you understand the code now in your hands is to hack away.  Follow a quick, iterative approach when coding:  think of a feature you want to add, write as little code as possible, test and confirm your assumptions, repeat.\n\nHere are a few ideas to try:\n\n- Change the formatting of the message\n- Add a timestamp to each message\n- Display past messages when joining the chat room\n- Reply to simple questions such as \"What time is it?\"", chapter_id: 2},
  {name: "Conversational Bots", sectionname: "conversational-bots", section_number: 2, content: "### CONVERSATIONAL BOTS\n\nDid you try to make your chat room answer simple questions? How would we go about implementing such a feature?   \n\n1. First we need to realize that a message is meant as a question.  How would we do that?\n\nWe'll use the power of [Regular Expressions](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions), an old technique that is very useful when searching for certain patterns within strings of characters.  For example the expression ` /\\?$/ ` means: _\"look for a question mark at the end of the message\"_\n\nTo keep things tidy, we will create a function that is ONLY responsible for figuring out if a message has a question mark at the end, using the regular expression above.\n\n```\nfunction isQuestion(msg) {\n  return msg.match(/\\?$/)\n}\n```\n\n2. Then we should figure out what is being asked and calculate an answer.  A very simplistic approach would be to have a list of questions we understand.\n\nAs the only thing we care about at this time is the word \"time\" we can use a very similar approach.  Have you noticed how I try to write simple functions that do ONE very simple thing at a time?  And test.  If you master this simple cycle, you will make much more progress.  The *Single Responsibility Principle* is an important tenet of Software Development.\n\n```\nfunction askingTime(msg) {\n  return msg.match(/time/i)\n}\n```\n\n3. Then, instead of simply \"echoing\" the message, we should respond with our calculated answer.  The one place where it makes sense to do this is that time when a message arrives at the server.  Let's put it all together\n\n```\nif (!isQuestion(msg)) {\n  io.emit('message', msg);\n} else if (askingTime(msg)) {\n  io.emit('message', new Date);\n} \n```\n\nI'm happy that our bot is capable of answering the simple question: \"what time is it?\".  However, I'm starting to realize the complexity of building a bot that would truly be able to understand this and many other questions.  Which regular expressions would be useful if we want to expand our \"smartness\"?  Time is an easy thing to \"calculate\", but how about more complicated things?", chapter_id: 2},
  {name: "What Are APIs?", sectionname: "what-are-apis", section_number: 1, content: "### APIS\n\nThe good news is that the web is full of resources.  Most answers you need are out there, somewhere, available to be shared. We just need to know how to ask.  And we need to know WHO to ask. \n\nTo get a feel for how much can be done with APIs, take a look at [Todd Motto's list of public APIs](https://github.com/toddmotto/public-apis)\n\nOur next trick will involve giving our Bot the ability to provide weather updates.  Weather is one of those things that we couldn't possibly calculate in our application, but that it is easily available on the web.", chapter_id: 3},
  {name: "Interacting with APIs", sectionname: "interacting-with-apis", section_number: 2, content: "### CURL \n\nTo get started try the following command in your Terminal:\n\n```\ncurl https://www.metaweather.com/api/location/4118/\n```\n\nBefore we start writing any code, let's understand what exactly is happening here:\n\n- `curl` is a tool that does much of what a browser does, but in your terminal.  \n- In this particular case we are using it to navigate to a website called `www.metaweather.com`.  Have you heard about it before?  Probably not, it is meant for computers, not humans.  Instead of a human interface (a webpage), it provides its data in a programming interface.  This is why it is called an API (Application Programming Interface)\n- Much like some sites that contain a lot of information, it organizes all its data in a hierarchical way, in this case by location.  We'll talk more about this soon.\n- When the site responds, the data comes back in a format that may be hard to read for humans, but it is super easy for programs.  This format is called JSON and it is particularly friendly to Javascript.\n\n### JSON\n\n```json\n{ \"consolidated_weather\": \n   [ { \"id\": 5093320921448448,\n       \"weather_state_name\": \"Heavy Rain\",\n       \"weather_state_abbr\": \"hr\",\n       \"wind_direction_compass\": \"S\",\n       \"created\": \"2017-08-11T20:34:23.801200Z\",\n       \"applicable_date\": \"2017-08-11\",\n       \"min_temp\": 19.16,\n       \"max_temp\": 23.448333333333334,\n       \"the_temp\": 22.886666666666667,\n       \"wind_speed\": 6.816575418346193,\n       \"wind_direction\": 179.21851889023347,\n       \"air_pressure\": 1012.51,\n       \"humidity\": 84,\n       \"visibility\": 11.815062534796787,\n       \"predictability\": 77 } ],\n  \"time\": \"2017-08-11T19:10:55.555640-04:00\",\n  \"sun_rise\": \"2017-08-11T06:17:56.668717-04:00\",\n  \"sun_set\": \"2017-08-11T20:28:07.284434-04:00\",\n  \"timezone_name\": \"LMT\",\n  \"parent\": \n   { \"title\": \"Canada\",\n     \"location_type\": \"Country\",\n     \"woeid\": 23424775,\n     \"latt_long\": \"56.954681,-98.308968\" },\n  \"sources\": \n   [ { \"title\": \"BBC\",\n       \"slug\": \"bbc\",\n       \"url\": \"http://www.bbc.co.uk/weather/\",\n       \"crawl_rate\": 180 } ],\n  \"title\": \"Toronto\",\n  \"location_type\": \"City\",\n  \"woeid\": 4118,\n  \"latt_long\": \"43.648560,-79.385368\",\n  \"timezone\": \"America/Toronto\" }\n```\n\nReading JSON notation and figuring out how to access this data is half the battle of integrating data from the web into your application.  We should practice that.\n\nTake the JSON code above and use it to practice the \"dot notation\" of javascript objects.  \n\n```\nnode\n> data = { consolidated_weather:  ... }\n> data.title\n'Toronto'\n> data.parent.title\n'Canada'\n```\n\nGo from there and see if you can come up with an expression that would simply tell you what the weather forecast for today is.", chapter_id: 3},
  {name: "GET Requests", sectionname: "get-requests", section_number: 3, content: "### GET\n\nNow that we have discovered a particularly useful resource on the web, let's work on our server.js so it knows weather.\n\n```\nfunction getWeather(callback) {\n  var request = require('request');\n  request.get(\"https://www.metaweather.com/api/location/4118/\", function (error, response) {\n    if (!error && response.statusCode == 200) {\n      var data = JSON.parse(response.body);\n      callback(data.consolidated_weather[0].weather_state_name);\n    }\n  })\n}\n```\n\nThere are 2 things that are super important in this small snippet of code:\n\n1. Notice that `request.get` function?  For now think of it like your very own `curl` inside your javascript code.  What else is interesting about the parameters that we pass to that function?   CALLBACKS!   Where did we see this before?  \n\n2. Whenever data is received in JSON, we can use `JSON.parse` to convert plain text data into an actual javascript object.  After this point any element of data can be accessed as if it was a variable in our application, using our dot-notation approach.", chapter_id: 3},
  {name: "Callbacks", sectionname: "callbacks", section_number: 4, content: "### CALLBACKS \n\nWe are almost at the end of our session.  But for things to work well, we have to integrate that `function getWeather()` into the rest of our code.  Your instinct should be to try to do something very similar to what we did earlier today to handle the _Time_ questions. \n\nBefore we go through the solution, give it a try on your own following these tips:\n\n1. Where in the `getWeather` function is the answer we need?\n2. How is that answer being sent out from the function?\n3. What is the role of the callback parameter?\n\nTo keep you at the edge of your seats, I'll give you the WRONG answer:\n\n```\nelse if (askingWeather(msg)) {\n  io.emit('message', getWeather())\n}\n```\n\nWhy is this wrong?  Look at the CORRECT version and compare:\n\n```\nelse if (askingWeather(msg)) {\n  getWeather(function(weather) {\n    io.emit('message', weather)\n  })\n}\n```\n\nNotice how `getWeather` will take one parameter which indicates what to do AFTER the proper response from the API is received.  The function will wait for as long as it needs before executing that simple line of code.  That callback is a very common pattern in javascript.", chapter_id: 3},
  {name: "Wrap-Up", sectionname: "wrap-up", section_number: 5, content: "### WRAP-UP\n\nIf you are following step by step, you should be able to ask for the weather in your chat room.  Remember to ask nicely by ending with a question mark (?).  Otherwise now is a good time to catch up by looking at the full version of the code and comparing against your own.  \n\nBetween Regular Expressions, JSON and Callbacks, we did cover quite a bit of ground on our server-side javascript skills, so do not worry if you are still munching over some of the concepts.  Keep asking questions.  ", chapter_id: 3},
  {name: "Lighthouse Labs Prep Course", sectionname: "lighthouse-labs-prep-course", section_number: 1, content: "### Lighthouse Labs Prep Course 🏋🏽\n\nAll incoming students for the Lighthouse Labs Web Development Bootcamp and iOS Development Bootcamp are required to complete 40-60 hours or preparatory work before they enter the classroom. Our prep course covers the foundation that is necessary for students to hit the ground running on day one! The prep material consists of some of our favourite resources paired with curriculum created by the Lighthouse Labs education team.\n\nWeb Development Bootcamp Prep Course | iOS Development Bootcamp Prep Course\n\nIf you're looking to dive deeper into Web or iOS Development or get a better idea of what taking our Bootcamp will entail, this is a great place to start.\n\n", chapter_id: 4},
  {name: "Additional Resources", sectionname: "additional-resources", section_number: 2, content: "### Additional Resources 📕\n\nLearning to code is more accessible than ever! There are endless online resources that cater to every learning style, and local organizations that offer free workshops for you to learn in person. If you're looking for more ways to explore programming or are getting stuck in a coding rut, explore some of the recommendations below or read our guide on How To Learn To Code.\n\n\n### Online Resources\n\nBento\n\nCodecademy\n\nCoderByte\n\nCodeWars\n\nEloquent JavaScript\n\nKhanAcademy\n\nTreehouse\n\n\n### Coding Non-Profits & Community Groups\n\nApp Camp For Girls\n\nBridging To Technology\n\nKids Code Jeunesse\n\nLadies Learning Code\n\nLighthouse Labs Workshops\n\n\n\n### Books/Videos\n\nHow To Learn To Code\n\nLearn Code The Hard Way", chapter_id: 4},
  {name: "Introduction", sectionname: "intro", section_number: 1, content: "", chapter_id: 5},
  {name: "Who Are We?", sectionname: "who-are-we", section_number: 2, content: "", chapter_id: 5},
  {name: "What Can We Create?", sectionname: "what-can-we-create", section_number: 3, content: "", chapter_id: 5},
  {name: "Get Started", sectionname: "get-started", section_number: 4, content: "", chapter_id: 5},
  {name: "HTML", sectionname: "html", section_number: 1, content: "", chapter_id: 6},
  {name: "Image Tags", sectionname: "image-tags", section_number: 2, content: "", chapter_id: 6},
  {name: "Text Tags", sectionname: "text-tags", section_number: 3, content: "", chapter_id: 6},
  {name: "Creating Lists", sectionname: "creating-lists", section_number: 4, content: "", chapter_id: 6},
  {name: "Creating Links", sectionname: "creating-links", section_number: 5, content: "", chapter_id: 6},
  {name: "Structuring Your Pages", sectionname: "structuring-your-pages", section_number: 6, content: "", chapter_id: 6},
  {name: "Debugging", sectionname: "debugging", section_number: 7, content: "", chapter_id: 6},
  {name: "Cascading Style Sheets", sectionname: "cascading-style-sheets", section_number: 1, content: "", chapter_id: 7},
  {name: "Selectors, Classes & IDs", sectionname: "selectors-classes-ids", section_number: 2, content: "", chapter_id: 7},
  {name: "Fonts", sectionname: "fonts", section_number: 3, content: "", chapter_id: 7},
  {name: "Colours", sectionname: "colours", section_number: 4, content: "", chapter_id: 7},
  {name: "Margins & Padding", sectionname: "margins-padding", section_number: 5, content: "", chapter_id: 7},
  {name: "Specificity", sectionname: "specificity", section_number: 6, content: "", chapter_id: 7},
  {name: "Positioning", sectionname: "positioning", section_number: 7, content: "", chapter_id: 7},
  {name: "Debugging", sectionname: "debugging", section_number: 8, content: "", chapter_id: 7},
  {name: "Tutorial: Building A Webpage", sectionname: "tutorial-building-a-webpage", section_number: 1, content: "", chapter_id: 8},
  {name: "Words Of Wis-Don", sectionname: "words-of-wis-don", section_number: 2, content: "", chapter_id: 8},
  {name: "Lighthouse Labs Prep Course", sectionname: "lighthouse-labs-prep-course", section_number: 1, content: "", chapter_id: 9},
  {name: "Additional Resources", sectionname: "additional-resources", section_number: 2, content: "", chapter_id: 9},
  {name: "Introduction", sectionname: "intro", section_number: 1, content: "", chapter_id: 10},
  {name: "What Is JavaScript?", sectionname: "what-is-javascript", section_number: 2, content: "", chapter_id: 10},
  {name: "Building A Chat App", sectionname: "building-a-chat-app", section_number: 3, content: "", chapter_id: 10},
  {name: "Setup", sectionname: "set-up", section_number: 4, content: "", chapter_id: 10},
  {name: "HTML", sectionname: "html", section_number: 1, content: "", chapter_id: 11},
  {name: "CSS", sectionname: "css", section_number: 2, content: "", chapter_id: 11},
  {name: "Example CSS", sectionname: "example-css", section_number: 3, content: "", chapter_id: 11},
  {name: "Client Side", sectionname: "client-side", section_number: 1, content: "", chapter_id: 12},
  {name: "Node", sectionname: "node", section_number: 2, content: "", chapter_id: 12},
  {name: "Express", sectionname: "express", section_number: 3, content: "", chapter_id: 12},
  {name: "Socket.io", sectionname: "socket-io", section_number: 4, content: "", chapter_id: 12},
  {name: "Enhancements (Stretch Goals!)", sectionname: "enhancements", section_number: 5, content: "", chapter_id: 12},
  {name: "Lighthouse Labs Prep Course", sectionname: "lighthouse-labs-prep-course", section_number: 1, content: "", chapter_id: 13},
  {name: "Additional Resources", sectionname: "additional-resources", section_number: 2, content: "", chapter_id: 13},
  {name: "Intro", sectionname: "intro", section_number: 1, content: "", chapter_id: 14}
])
User.create!([
  {first_name: "Jack", last_name: "Black", location: "Vancouver", motivation: "coding sounded fun", email: "jack@black.com", password: "longunreadablestring", password_confirmation: "longunreadablestring"},
  {first_name: "Rosalind", last_name: "Lake", location: "Toronto", motivation: "I'd like to build my own webpage", email: "rosy@lake.com", password: "yepyepyep", password_confirmation: "yepyepyep"},
  {first_name: "Larry", last_name: "Duck", location: "Vancouver", motivation: "I'd like to build my own webpage", email: "larry@larry.com", password: "larrylarry", password_confirmation: "larrylarry"}

])
Review.create!([
  {rating: 5, review: "I really enjoyed getting a taste of JavaScript. This course made it fun!", show_flag: true, course_id: 3, user_id: 1},
  {rating: 5, review: "I was pleasantly surprised at how much I was able to learn in such a relatively short period of time. ", show_flag: true, course_id: 3, user_id: 2},
  {rating: 5, review: "I really enjoyed getting a taste of HTML and CSS. This course made it fun!", show_flag: true, course_id: 1, user_id: 1},
  {rating: 5, review: "I really enjoyed getting a taste of JavaScript. This course made it fun!", show_flag: true, course_id: 2, user_id: 2},
  {rating: 5, review: "I really enjoyed getting a taste of IOS. This course made it fun!", show_flag: true, course_id: 4, user_id: 1}
])
UserSection.create!([
  {section_id: 1, user_id: 1},
  {section_id: 2, user_id: 1},
  {section_id: 3, user_id: 1},
  {section_id: 4, user_id: 1},
  {section_id: 5, user_id: 1},
  {section_id: 6, user_id: 1},
  {section_id: 7, user_id: 1},
  {section_id: 8, user_id: 1},
  {section_id: 9, user_id: 1},
  {section_id: 10, user_id: 1},
  {section_id: 11, user_id: 1},
  {section_id: 12, user_id: 1},
  {section_id: 1, user_id: 2},
  {section_id: 2, user_id: 2},
  {section_id: 3, user_id: 2},
  {section_id: 4, user_id: 2},
  {section_id: 5, user_id: 2},
  {section_id: 1, user_id: 3},
  {section_id: 2, user_id: 3},
  {section_id: 3, user_id: 3},
  {section_id: 4, user_id: 3},
  {section_id: 13, user_id: 3},
  {section_id: 14, user_id: 3},
  {section_id: 15, user_id: 3},
  {section_id: 16, user_id: 3},
  {section_id: 17, user_id: 3},
  {section_id: 18, user_id: 3},
  {section_id: 19, user_id: 3},
  {section_id: 20, user_id: 3},
  {section_id: 21, user_id: 3},
  {section_id: 22, user_id: 3},
  {section_id: 23, user_id: 3},
  {section_id: 24, user_id: 3},
  {section_id: 25, user_id: 3},
  {section_id: 26, user_id: 3},
  {section_id: 27, user_id: 3},
  {section_id: 28, user_id: 3},
  {section_id: 29, user_id: 3},
  {section_id: 30, user_id: 3},
  {section_id: 31, user_id: 3},
  {section_id: 32, user_id: 3},
  {section_id: 33, user_id: 3},
  {section_id: 34, user_id: 3},
  {section_id: 35, user_id: 3},
  {section_id: 36, user_id: 3},
  {section_id: 37, user_id: 3},
  {section_id: 38, user_id: 3},
  {section_id: 39, user_id: 3},
  {section_id: 40, user_id: 3},
  {section_id: 41, user_id: 3},
  {section_id: 42, user_id: 3},
  {section_id: 43, user_id: 3},
  {section_id: 44, user_id: 3},
  {section_id: 45, user_id: 3},
  {section_id: 46, user_id: 3},
  {section_id: 47, user_id: 3},
  {section_id: 48, user_id: 3},
  {section_id: 49, user_id: 3}
])
